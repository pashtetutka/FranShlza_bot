from __future__ import annotations

import logging
import asyncio
from typing import Optional, List

from telegram import (
    Update,
    InputMediaPhoto,  # Added missing import
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    CallbackQueryHandler,
)
from telegram.constants import ParseMode

from config import Settings
from database import Database
from decorators import admin_only
from constants import *
from keyboards import *
from utils import send_long, fmt_table

# Setup
settings = Settings()
db = Database(settings.DB_PATH)
logger = logging.getLogger(__name__)

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s"
)

# ‚îÄ‚îÄ‚îÄ DB HELPERS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def upsert_user(tg_id: int, ref_code: Optional[str]) -> None:
    db.upsert_user(tg_id, ref_code)


def set_user_field(tg_id: int, field: str, value) -> None:
    db.set_user_field(tg_id, field, value)


def get_user(tg_id: int) -> Optional[tuple]:
    return db.get_user(tg_id)


def store_payment(tg_id: int, amount: int) -> None:
    db.store_payment(tg_id, amount)


def fetch_users(limit: int = 20, offset: int = 0) -> List[tuple]:
    return db.fetch_users(limit, offset)


def fetch_user_detail(tg_id: int) -> Optional[tuple]:
    return db.fetch_user_detail(tg_id)


def fetch_referrals(tg_id: int) -> List[int]:
    return db.fetch_referrals(tg_id)


def global_stats() -> tuple[int, int, int]:
    return db.global_stats()

def referral_counts() -> dict[int, int]:
    """{uid: children_qty} –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    with sqlite3.connect(DB_PATH) as con:
        cur = con.cursor()
        cur.execute("SELECT referrer_id, COUNT(*) FROM users WHERE referrer_id IS NOT NULL GROUP BY referrer_id")
        return {uid: cnt for uid, cnt in cur.fetchall()}


# ‚îÄ‚îÄ‚îÄ KEYBOARDS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
INTRO_KB = InlineKeyboardMarkup(
    [[InlineKeyboardButton("–û–∑–Ω–∞–∫–æ–º–∏–ª—Å—è ‚úÖ", callback_data="intro_done")]]
)
CHOICE_KB = ReplyKeyboardMarkup([["üëã –•–æ—á—É –∫ –≤–∞–º", "‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ"]], resize_keyboard=True)
ROLE_KB = InlineKeyboardMarkup(
    [[
        InlineKeyboardButton("–ù–æ–≤–∏—á–æ–∫", callback_data="role_new"),
        InlineKeyboardButton("–°—Ç–∞—Ä–∏—á–æ–∫", callback_data="role_old"),
    ]]
)
PAY_NOTIFY = InlineKeyboardMarkup([[InlineKeyboardButton("–Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="notify_payment")]])
MENU_KB = ReplyKeyboardMarkup([[
    "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
]], resize_keyboard=True)

# ‚îÄ‚îÄ‚îÄ UTILS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _chunks(s: str, n: int = 4000):
    """–†–∞–∑–±–∏—Ç—å —Å—Ç—Ä–æ–∫—É –Ω–∞ –∫—É—Å–∫–∏ ‚â§ n —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Telegram."""
    for i in range(0, len(s), n):
        yield s[i : i + n]

# ‚îÄ‚îÄ‚îÄ send_long ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_long(bot, chat_id: int, text: str) -> None:
    """–†–∞–∑–±–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ —Å—Ç—Ä–æ–∫–∞–º (‚â§4096) –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å HTML-–ø–∞—Ä—Å–∏–Ω–≥–æ–º."""
    lines = text.split("\n")
    part = ""
    for line in lines:
        if len(part) + len(line) + 1 > 4000:
            await bot.send_message(chat_id, part, parse_mode=ParseMode.HTML)
            part = ""
        part += line + "\n"
    if part:
        await bot.send_message(chat_id, part, parse_mode=ParseMode.HTML)


# ‚îÄ‚îÄ‚îÄ pretty printing ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def fmt_table(rows: list[tuple], headers: list[str]) -> str:
    """
    –†–∏—Å—É–µ—Ç —Ä–æ–≤–Ω—É—é ASCII-—Ç–∞–±–ª–∏—Ü—É, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≤ <pre>‚Ä¶</pre> –¥–ª—è HTML.
    –ó–∞–≥–æ–ª–æ–≤–∫–∏ ‚Äî –ø–æ —Ü–µ–Ω—Ç—Ä—É, –¥–∞–Ω–Ω—ã–µ ‚Äî –≤–ª–µ–≤–æ.
    """
    # –≤—ã—á–∏—Å–ª—è–µ–º —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
    cols = list(zip(headers, *rows))
    widths = [max(len(str(v)) for v in col) for col in cols]

    # —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º)
    header = " | ".join(
        f"{headers[i]:^{widths[i]}}"
        for i in range(len(headers))
    )
    # —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    sep = "-+-".join("-" * widths[i] for i in range(len(widths)))

    # —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–≤–ª–µ–≤–æ)
    data_lines = []
    for row in rows:
        data_lines.append(
            " | ".join(f"{str(row[i]):<{widths[i]}}" for i in range(len(row)))
        )

    body = "\n".join([header, sep] + data_lines)
    return f"<pre>\n{body}\n</pre>"



# ‚îÄ‚îÄ‚îÄ HANDLERS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    uid = update.effective_user.id
    ref_code: Optional[str] = context.args[0] if context.args else None
    upsert_user(uid, ref_code)

    media: List[InputMediaPhoto] = [InputMediaPhoto(fid) for fid in IMAGE_FILE_IDS]
    try:
        await context.bot.send_media_group(chat_id=uid, media=media)
    except Exception as e:
        logger.warning("send_media_group failed: %s", e)

    await update.message.reply_text(
        "–ö–æ–≥–¥–∞ –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ—Å—å —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("–û–∑–Ω–∞–∫–æ–º–∏–ª—Å—è ‚úÖ", callback_data="intro_done")]]
        ),
    )

async def intro_done(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        "–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —É–¥–µ–ª–∏–ª–∏ –Ω–∞–º –≤—Ä–µ–º—è! –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=CHOICE_KB
    )

ABOUT_CHAT_ID = 918767042
ABOUTMESSAGE_ID = 4646

async def about_project(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await context.bot.copy_message(
        chat_id=update.effective_chat.id,
        from_chat_id=ABOUT_CHAT_ID,
        message_id=ABOUTMESSAGE_ID
    )


async def want_join(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–í—ã —É–∂–µ –≤–µ–¥—ë—Ç–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–≥ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ?",
        reply_markup=ROLE_KB,
    )

async def choose_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id

    if q.data == "role_new":
        set_user_field(uid, "role", "new")
        set_user_field(uid, "price_offer", settings.PRICE_RUB)        
        await q.message.reply_text(
            f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {settings.PRICE_RUB}‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É {settings.CARD_NUMBER}", reply_markup=PAY_NOTIFY
        )
    else:
        set_user_field(uid, "role", "old_pending")        
        context.user_data["awaiting_inst_nick"] = True
        await q.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Instagram-–Ω–∏–∫:")


async def notify_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    tg_user = f"@{q.from_user.username}" if q.from_user.username else q.from_user.first_name

    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞, –æ–Ω –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"confirm_{uid}")]])
    await context.bot.send_message(
        settings.ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_user} –Ω–∞–∂–∞–ª ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª", reply_markup=kb
    )
    await q.message.reply_text("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")

async def handle_instagram_nick(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –Ω–∏–∫."""
    if not context.user_data.get("awaiting_inst_nick"):
        return                          
    BAD_PREFIXES = ("‚ÑπÔ∏è", "üëã", "üìû", "üë•", "üìä")
    if any(update.message.text.startswith(p) for p in BAD_PREFIXES):
        return
    inst_nick_raw = update.message.text.strip()
    inst_nick     = inst_nick_raw.lstrip("@") 
    uid           = update.effective_user.id

    set_user_field(uid, "inst_nick", inst_nick)
    context.user_data["awaiting_inst_nick"] = False

    tg_user = f"@{update.effective_user.username}" if update.effective_user.username else update.effective_user.first_name
    await context.bot.send_message(settings.ADMIN_ID, f"–°—Ç–∞—Ä–∏—á–æ–∫ Instagram: @{inst_nick}\nTelegram: {tg_user}\nuid: {uid}\n")
    await context.bot.send_message(settings.ADMIN_ID, f"/price {uid} 1000")
    await update.message.reply_text(
        "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏. –û–∂–∏–¥–∞–π—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É.üì©"
    )

async def price_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if settings.ADMIN_ID not in (update.effective_user.id, update.effective_chat.id):
        return
    if len(context.args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /price <tg_id> <—Å—É–º–º–∞>")
        return
    try:
        tgt = int(context.args[0]); amt = int(context.args[1])
    except ValueError:
        await update.message.reply_text("–û–±–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return

    set_user_field(tgt, "price_offer", amt)
    set_user_field(tgt, "role", "old") 
    kb = InlineKeyboardMarkup([[InlineKeyboardButton(f"–Ø –æ–ø–ª–∞—Ç–∏–ª {amt}‚ÇΩ", callback_data="notify_payment")]])
    await context.bot.send_message(
        tgt, f"–í–∞—à–∞ —Ü–µ–Ω–∞: {amt}‚ÇΩ. –ñ–¥–µ–º –æ–ø–ª–∞—Ç—É", reply_markup=kb
    )
    await update.message.reply_text(f"–¶–µ–Ω–∞ {amt}‚ÇΩ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tgt}.")

async def confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer()
    try:
        uid = int(q.data.split("_")[1])
    except (IndexError, ValueError):
        return

    set_user_field(uid, "paid", 1)
    store_payment(uid, settings.PRICE_RUB)

    await q.message.reply_text(f"–û–ø–ª–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

    await context.bot.send_photo(chat_id=uid, photo=YELLOW_FILE_ID)
    await context.bot.send_message(
        chat_id=uid,
        text = '''–ò—Ç–∞–∫, –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º - —ç—Ç–æ –Ω–∞—à —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç\n
–ê–≤–∞—Ç–∞—Ä - –±–µ—Ä–∏ –º–æ–π –∂—ë–ª—Ç—ã–π —Ü–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —è –ø—Ä–∏–∫—Ä–µ–ø–∏–ª. –í –¥–∞–ª—å–Ω–µ–π—à–µ–º, –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π, —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –∞–≤–∞—Ç–∞—Ä –Ω–∞ —Å–≤–æ–π\n
–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è - —Å–¥–µ–ª–∞–π —á—Ç–æ-—Ç–æ –ø–æ–Ω—è—Ç–Ω–æ–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –Ω–∞—à–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º (–ø—Ä–∏–º–µ—Ä, @creatorofmotivation)\n
–û–ø–∏—Å–∞–Ω–∏–µ - –¥–æ–±–∞–≤—å —Å–º—ã—Å–ª–æ–≤—É—é "—É–ø–∞–∫–æ–≤–∫—É" (–ø—Ä–∏–º–µ—Ä, –∑–∞—Ä—è–∂–∞–π—Å—è –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)\n
–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ - –Ω–∞–¥–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Å –ª–∏—á–Ω–æ–≥–æ –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –≤–∏–¥–µ—Ç—å –≤—Å–µ —Ü–∏—Ñ—Ä—ã. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª–µ–µ, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É''',
        reply_markup=MENU_KB,
    )
    await context.bot.send_video(chat_id=uid, video=VIDEO_FILE_ID)

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    uid  = update.effective_user.id
    text = update.message.text

    if text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        context.user_data["awaiting_support"] = True
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
    elif text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞":
        await update.message.reply_text(
            f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: \n https://t.me/{context.bot.username}?start={uid}"
        )
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def support_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.user_data.get("awaiting_support"):
        return
    user    = update.effective_user
    tg_user = f"@{user.username}" if user.username else user.first_name
    await context.bot.send_message(settings.ADMIN_ID, f"[Support] from {tg_user} (id={user.id}):\n{update.message.text}")
    await context.bot.send_message(settings.ADMIN_ID, f"/reply {user.id} <–æ—Ç–≤–µ—Ç>")
    await update.message.reply_text("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç(–ù–µ –±–æ–ª–µ–µ 2 —Å—É—Ç–æ–∫).")
    context.user_data["awaiting_support"] = False


# ‚îÄ‚îÄ‚îÄ ADMIN COMMANDS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@admin_only(settings.ADMIN_ID)
async def admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reply <tg_id> <—Ç–µ–∫—Å—Ç>")
        return
    try:
        target = int(context.args[0])
    except ValueError:
        await update.message.reply_text("–ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º Telegram-ID.")
        return

    answer = " ".join(context.args[1:])
    await context.bot.send_message(chat_id=target, text=f"üí¨ –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{answer}")
    await update.message.reply_text(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target}.")

@admin_only(settings.ADMIN_ID)
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    total, paid, money = global_stats()

    refcnt   = referral_counts()
    leaders  = sorted(refcnt.items(), key=lambda x: x[1], reverse=True)[:5]
    ref_lines = [
        f"{i+1}. <code>{uid}</code> ‚Äî {cnt}"
        for i, (uid, cnt) in enumerate(leaders)
    ] or ["-"]

    percent = f"{paid/total*100:.1f}%" if total else "0%"

    text = (
        "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
        f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ: <b>{total}</b>\n"
        f"‚Ä¢ –û–ø–ª–∞—Ç–∏–ª–∏: <b>{paid}</b> ({percent})\n"
        f"‚Ä¢ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π: <b>{money} ‚ÇΩ</b>\n"
        f"‚Ä¢ <u>–¢–û–ü-5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</u> (–ø–æ —á–∏—Å–ª—É –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö):\n" + "\n".join(ref_lines)
    )
    await context.bot.send_message(chat_id=update.effective_chat.id, text=text, parse_mode="HTML")


async def list_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if settings.ADMIN_ID not in (update.effective_user.id, update.effective_chat.id):
        return

    # 1) –¥–æ—Å—Ç–∞—ë–º
    limit = int(context.args[0]) if context.args else 20
    rows  = fetch_users(limit)
    refs  = referral_counts()

    # 2) –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º-—é–∑–µ—Ä–æ–≤ –¥–ª—è —é–∑–Ω–µ–π–º–æ–≤
    chats = await asyncio.gather(*(context.bot.get_chat(r[0]) for r in rows))
    users = {c.id: c for c in chats}

    # 3) —Å–æ–±–∏—Ä–∞–µ–º —Ç–∞–±–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    data = []
    for tg_id, role, paid, price, parent, inst, joined in rows:
        uname    = users[tg_id].username or "-"
        inst     = inst or "-"
        parent   = str(parent) if parent else "-"
        children = refs.get(tg_id, 0)
        joined   = joined.replace("T", " ")[:19]
        data.append((
            tg_id,
            uname,
            inst,
            role,
            paid,
            price or "-",
            parent,
            children,
            joined
        ))

    # 4) –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headers = ["TG_ID", "USER", "INST", "ROLE", "PAID", "PRICE", "PARENT", "REFS", "JOINED"]
    text    = fmt_table(data, headers)

    # 5) —à–ª—ë–º
    await send_long(context.bot, settings.ADMIN_ID, text)




async def user_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if settings.ADMIN_ID not in (update.effective_user.id, update.effective_chat.id):
        return
    if len(context.args) != 1:
        return

    try:
        tgt = int(context.args[0])
    except ValueError:
        return await update.message.reply_text("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    row = fetch_user_detail(tgt)
    if not row:
        return await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    (
        tg_id,
        ref_code,
        parent_id,
        wallet,
        role,
        inst_nick,
        price_offer,
        paid,
        subs_ok,
        joined_at,
    ) = row

    chat = await context.bot.get_chat(tgt)
    username = f"@{chat.username}" if chat.username else chat.first_name
    children = referral_counts().get(tgt, 0)
    joined = joined_at.replace("T", " ")[:19]

    text = (
        f"üë§ <u>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{tg_id}</code></u>\n"
        f"<b>Username</b>: {username}\n"
        f"<b>Instagram</b>: {inst_nick or '-'}\n"
        f"<b>Role</b>: {role}\n"
        f"<b>Paid</b>: {paid}\n"
        f"<b>Price</b>: {price_offer or '-'}\n"
        f"<b>Parent</b>: {parent_id or '-'}\n"
        f"<b>Referrals</b>: {children}\n"
        f"<b>Joined</b>: {joined}"
    )
    await context.bot.send_message(chat_id=update.effective_chat.id, text=text, parse_mode="HTML")



async def set_field_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if settings.ADMIN_ID not in (update.effective_user.id, update.effective_chat.id):
        return
    try:
        tgt = int(context.args[0])
    except ValueError:
        return await update.message.reply_text("tg_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    field, value = context.args[1], " ".join(context.args[2:])
    try:
        set_user_field(tgt, field, value)
        await update.message.reply_text("OK")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def add_payment_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if settings.ADMIN_ID not in (update.effective_user.id, update.effective_chat.id):
        return
    try:
        tgt = int(context.args[0]); amt = int(context.args[1])
    except ValueError:
        return await update.message.reply_text("Usage: /add_payment <tg_id> <amount>")
    store_payment(tgt, amt)
    set_user_field(tgt, "paid", 1)
    await update.message.reply_text("–ó–∞–ø–∏—Å–∞–ª. ‚úÖ")


async def detect_video_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if settings.ADMIN_ID not in (update.effective_user.id, update.effective_chat.id):
        return

    if update.message.video:
        file_id = update.message.video.file_id
        await update.message.reply_text(f"üé¨ Video file_id: <code>{file_id}</code>", parse_mode="HTML")

async def detect_message_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if settings.ADMIN_ID not in (update.effective_user.id, update.effective_chat.id):
        return

    if update.message:
        file_id = update.message.message_id
        await update.message.reply_text(f"üé¨ Video file_id: <code>{file_id}</code>", parse_mode="HTML")
    # –ë–µ—Ä—ë–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —á–∞—Ç–∞
    msg_id  = update.message.message_id
    chat_id = update.effective_chat.id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ HTML, —á—Ç–æ–±—ã –±—ã–ª–æ —É–¥–æ–±–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
    await update.message.reply_html(
        f"üìå <b>Chat ID</b>: <code>{chat_id}</code>\n"
        f"‚úâÔ∏è <b>Message ID</b>: <code>{msg_id}</code>"
    )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ MAIN ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main() -> None:
    """Initialize and start the bot."""
    app = ApplicationBuilder().token(settings.BOT_TOKEN).build()
    
    # User commands
    app.add_handler(CommandHandler("start", start))
    
    # Admin commands
    admin_handlers = [
        CommandHandler(cmd, handler) for cmd, handler in [
            ("price", price_command),
            ("reply", admin_reply),
            ("stats", stats_command),
            ("list", list_users_command),
            ("user", user_command),
            ("set_field", set_field_command),
            ("add_payment", add_payment_command),
        ]
    ]
    for handler in admin_handlers:
        app.add_handler(handler)
    
    # Callbacks
    app.add_handler(CallbackQueryHandler(intro_done, pattern="^intro_done$"))
    app.add_handler(CallbackQueryHandler(choose_role, pattern="^role_"))
    app.add_handler(CallbackQueryHandler(notify_payment, pattern="^notify_payment$"))
    app.add_handler(CallbackQueryHandler(confirm_payment, pattern="^confirm_\\d+$"))

    # Message handlers
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        handle_instagram_nick
    ), group=0)

    menu_handlers = [
        MessageHandler(filters.Regex("^‚ÑπÔ∏è"), about_project),
        MessageHandler(filters.Regex("^üëã"), want_join),
        MessageHandler(
            filters.Regex("^(üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞|üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞|üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)$"),
            handle_menu
        ),
        MessageHandler(filters.TEXT & ~filters.COMMAND, support_message),
    ]
    for handler in menu_handlers:
        app.add_handler(handler, group=1)
    
    logger.info("Bot started and polling...")
    app.run_polling()

if __name__ == "__main__":
    main()