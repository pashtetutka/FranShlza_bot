from __future__ import annotations

import logging
from typing import Dict, Any, Optional

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from telegram.constants import ParseMode

from bot.config import settings
from bot.decorators import admin_only
from bot.db.reels import create_reel, upsert_asset, list_reels, get_reel, delete_reel, set_reel_active

logger = logging.getLogger(__name__)

ADMIN_ONLY = admin_only(settings.ADMIN_ID)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞
VIDEO, PREVIEW, CAPTION, CONFIRM = range(4)


def _kb_cancel() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="reel:cancel")]])


def _kb_confirm(reel_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"reel:save:{reel_id}")],
        [InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="reel:cancel")],
    ])


def _kb_list_item(reel_id: int, active: bool) -> InlineKeyboardMarkup:
    toggle = "üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if active else "üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
    toggle_code = "deactivate" if active else "activate"
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton(toggle, callback_data=f"reel:{toggle_code}:{reel_id}"),
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"reel:delete:{reel_id}"),
        ]
    ])


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ú–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@ADMIN_ONLY
async def reel_new(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    args = context.args or []
    title = " ".join(args).strip() if args else None

    created_by = update.effective_user.id          # ‚Üê —Ç–æ–ª—å–∫–æ ID, –Ω–µ –æ–±—ä–µ–∫—Ç Chat!
    reel_id = create_reel(title, created_by=created_by)

    context.user_data["reel"] = {"id": reel_id, "title": title}
    await update.message.reply_text(
        f"üÜï –°–æ–∑–¥–∞–Ω —Ä–∏–ª—Å ID <code>{reel_id}</code>\n"
        f"{'–ù–∞–∑–≤–∞–Ω–∏–µ: ' + title if title else '–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–¥–∞—Ç—å –ø–æ–∑–∂–µ.'}\n\n"
        f"–®–∞–≥ 1/3 ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ <b>–≤–∏–¥–µ–æ —Ä–∏–ª—Å–∞</b> (–∫–∞–∫ –≤–∏–¥–µ–æ).",
        parse_mode=ParseMode.HTML,
        reply_markup=_kb_cancel(),
    )
    return VIDEO



@ADMIN_ONLY
async def reel_video(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–®–∞–≥ 1: –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤–∏–¥–µ–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ file_id."""
    msg = update.message
    if not msg or not msg.video:
        await msg.reply_text("–≠—Ç–æ –Ω–µ –≤–∏–¥–µ–æ. –ü—Ä–∏—à–ª–∏—Ç–µ <b>–≤–∏–¥–µ–æ</b> —Ä–∏–ª—Å–∞.", parse_mode=ParseMode.HTML, reply_markup=_kb_cancel())
        return VIDEO

    reel: Dict[str, Any] = context.user_data.get("reel") or {}
    reel_id = reel.get("id")

    upsert_asset(
        reel_id=reel_id,
        kind="video",
        tg_chat_id=msg.chat_id,
        tg_message_id=msg.message_id,
        tg_file_id=msg.video.file_id,
        tg_file_unique_id=msg.video.file_unique_id,
    )

    await msg.reply_text(
        "‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n–®–∞–≥ 2/3 ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ <b>–ø—Ä–µ–≤—å—é</b> (–æ–±–ª–æ–∂–∫—É) –∫–∞–∫ —Ñ–æ—Ç–æ.",
        parse_mode=ParseMode.HTML,
        reply_markup=_kb_cancel(),
    )
    return PREVIEW


@ADMIN_ONLY
async def reel_preview(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–®–∞–≥ 2: –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–æ—Ç–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º largest file_id + message_id."""
    msg = update.message
    if not msg or not msg.photo:
        await msg.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ <b>–ø—Ä–µ–≤—å—é</b> (–æ–±–ª–æ–∂–∫—É) –∫–∞–∫ —Ñ–æ—Ç–æ.", parse_mode=ParseMode.HTML, reply_markup=_kb_cancel())
        return PREVIEW

    photo = msg.photo[-1]  # —Å–∞–º–æ–µ –∫—Ä—É–ø–Ω–æ–µ
    reel: Dict[str, Any] = context.user_data.get("reel") or {}
    reel_id = reel.get("id")

    upsert_asset(
        reel_id=reel_id,
        kind="preview",
        tg_chat_id=msg.chat_id,
        tg_message_id=msg.message_id,
        tg_file_id=photo.file_id,
        tg_file_unique_id=photo.file_unique_id,
    )

    await msg.reply_text(
        "‚úÖ –ü—Ä–µ–≤—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n–®–∞–≥ 3/3 ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b> —Ä–∏–ª—Å–∞ (—Ç–µ–∫—Å—Ç).",
        parse_mode=ParseMode.HTML,
        reply_markup=_kb_cancel(),
    )
    return CAPTION


@ADMIN_ONLY
async def reel_caption(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–®–∞–≥ 3: –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–µ–∫—Å—Ç-–æ–ø–∏—Å–∞–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å."""
    msg = update.message
    if not msg or not msg.text:
        await msg.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>—Ç–µ–∫—Å—Ç</b> ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∏–ª—Å–∞.", parse_mode=ParseMode.HTML, reply_markup=_kb_cancel())
        return CAPTION

    reel: Dict[str, Any] = context.user_data.get("reel") or {}
    reel_id = reel.get("id")

    upsert_asset(
        reel_id=reel_id,
        kind="caption",
        tg_chat_id=msg.chat_id,
        tg_message_id=msg.message_id,
        text=msg.text.strip(),
    )

    details = get_reel(reel_id)
    title = details["reel"].get("title") or f"Reel #{reel_id}"
    has_video = "video" in details["assets"]
    has_preview = "preview" in details["assets"]
    has_caption = "caption" in details["assets"]

    await msg.reply_text(
        f"üßæ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ</b>\n"
        f"ID: <code>{reel_id}</code>\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
        f"–í–∏–¥–µ–æ: {'‚úÖ' if has_video else '‚ùå'}\n"
        f"–ü—Ä–µ–≤—å—é: {'‚úÖ' if has_preview else '‚ùå'}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {'‚úÖ' if has_caption else '‚ùå'}\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Å—Ç–µ—Ä.",
        parse_mode=ParseMode.HTML,
        reply_markup=_kb_confirm(reel_id),
    )
    return CONFIRM


@ADMIN_ONLY
async def reel_confirm_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã."""
    q = update.callback_query
    data = q.data or ""
    await q.answer()

    if data == "reel:cancel":
        context.user_data.pop("reel", None)
        await q.message.edit_text("‚ùé –ú–∞—Å—Ç–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω.")
        return ConversationHandler.END

    if data.startswith("reel:save:"):
        reel_id = int(data.split(":")[2])
        context.user_data.pop("reel", None)
        await q.message.edit_text(f"‚úÖ –†–∏–ª—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω (ID <code>{reel_id}</code>).", parse_mode=ParseMode.HTML)
        return ConversationHandler.END

    return ConversationHandler.END


@ADMIN_ONLY
async def reel_cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã –Ω–∞ –ª—é–±–æ–º —à–∞–≥–µ: /reel_cancel"""
    context.user_data.pop("reel", None)
    await update.message.reply_text("‚ùé –ú–∞—Å—Ç–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –°–ø–∏—Å–æ–∫/—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@ADMIN_ONLY
async def reels_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–ø–∏—Å–æ–∫ —Ä–∏–ª—Å–æ–≤: /reels [limit]"""
    try:
        limit = int(context.args[0]) if context.args else 10
    except ValueError:
        limit = 10

    rows = list_reels(limit=limit)
    if not rows:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç —Ä–∏–ª—Å–æ–≤.")
        return

    lines = []
    for r in rows:
        rid = r["id"]
        title = r["title"] or f"Reel #{rid}"
        active = bool(r["is_active"])
        assets = r["assets"]
        lines.append(f"‚Ä¢ <b>{title}</b> (ID {rid}) ‚Äî {'üü¢ –∞–∫—Ç–∏–≤–µ–Ω' if active else 'üî¥ –≤—ã–∫–ª—é—á–µ–Ω'}, –∞—Å—Å–µ—Ç–æ–≤: {assets}")

    await update.message.reply_text(
        "\n".join(lines) + "\n\n–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.",
        parse_mode=ParseMode.HTML,
    )

    # –û—Ç–¥–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ ‚Äì —á—Ç–æ–±—ã –∞–¥–º–∏–Ω –º–æ–≥ –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å/—É–¥–∞–ª—è—Ç—å
    for r in rows:
        rid = r["id"]
        title = r["title"] or f"Reel #{rid}"
        active = bool(r["is_active"])
        await update.message.reply_text(
            f"ID <code>{rid}</code> ‚Äî <b>{title}</b>\n–°—Ç–∞—Ç—É—Å: {'üü¢ –∞–∫—Ç–∏–≤–µ–Ω' if active else 'üî¥ –≤—ã–∫–ª—é—á–µ–Ω'}",
            parse_mode=ParseMode.HTML,
            reply_markup=_kb_list_item(rid, active),
        )


@ADMIN_ONLY
async def reels_manage_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–Ω–æ–ø–∫–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö —Å–ø–∏—Å–∫–∞: –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å/—É–¥–∞–ª–∏—Ç—å."""
    q = update.callback_query
    data = q.data or ""
    await q.answer()

    try:
        _, action, rid_str = data.split(":")
        reel_id = int(rid_str)
    except Exception:
        return

    if action == "activate":
        set_reel_active(reel_id, True)
        await q.message.edit_text(f"ID <code>{reel_id}</code>: üü¢ –∞–∫—Ç–∏–≤–µ–Ω", parse_mode=ParseMode.HTML)
    elif action == "deactivate":
        set_reel_active(reel_id, False)
        await q.message.edit_text(f"ID <code>{reel_id}</code>: üî¥ –≤—ã–∫–ª—é—á–µ–Ω", parse_mode=ParseMode.HTML)
    elif action == "delete":
        delete_reel(reel_id)
        await q.message.edit_text(f"ID <code>{reel_id}</code>: üóëÔ∏è —É–¥–∞–ª—ë–Ω", parse_mode=ParseMode.HTML)


from bot.domain.services.reel_delivery_service import deliver_reels_daily

@ADMIN_ONLY
async def reels_send_now(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞–∑–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É‚Ä¶")
    await deliver_reels_daily(context.application.bot)
    await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ.")
