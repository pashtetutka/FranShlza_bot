from __future__ import annotations

import logging
from typing import Dict, Any, Optional
from telegram.error import BadRequest


from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from telegram.constants import ParseMode

from bot.config import settings
from bot.decorators import admin_only
from bot.db.reels import create_reel, upsert_asset, list_reels, get_reel, delete_reel, set_reel_active

logger = logging.getLogger(__name__)

ADMIN_ONLY = admin_only(settings.ADMIN_ID)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞
VIDEO, PREVIEW, CAPTION, CONFIRM = range(4)


def _kb_cancel() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="reel:cancel")]])


def _kb_confirm(reel_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"reel:save:{reel_id}")],
        [InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="reel:cancel")],
    ])


def _kb_list_item(reel_id: int, active: bool) -> InlineKeyboardMarkup:
    toggle = "üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if active else "üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
    toggle_code = "deactivate" if active else "activate"
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"reel:show:{reel_id}")],
        [
            InlineKeyboardButton(toggle,  callback_data=f"reel:{toggle_code}:{reel_id}"),
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"reel:delete:{reel_id}"),
        ],
    ])



# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ú–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@ADMIN_ONLY
async def reel_new(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    args = context.args or []
    title = " ".join(args).strip() if args else None

    created_by = update.effective_user.id          # ‚Üê —Ç–æ–ª—å–∫–æ ID, –Ω–µ –æ–±—ä–µ–∫—Ç Chat!
    reel_id = create_reel(title, created_by=created_by)

    context.user_data["reel"] = {"id": reel_id, "title": title}
    await update.message.reply_text(
        f"üÜï –°–æ–∑–¥–∞–Ω —Ä–∏–ª—Å ID <code>{reel_id}</code>\n"
        f"{'–ù–∞–∑–≤–∞–Ω–∏–µ: ' + title if title else '–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–¥–∞—Ç—å –ø–æ–∑–∂–µ.'}\n\n"
        f"–®–∞–≥ 1/3 ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ <b>–≤–∏–¥–µ–æ —Ä–∏–ª—Å–∞</b> (–∫–∞–∫ –≤–∏–¥–µ–æ).",
        parse_mode=ParseMode.HTML,
        reply_markup=_kb_cancel(),
    )
    return VIDEO



@ADMIN_ONLY
async def reel_video(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–®–∞–≥ 1: –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤–∏–¥–µ–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ file_id."""
    msg = update.message
    if not msg or not msg.video:
        await msg.reply_text("–≠—Ç–æ –Ω–µ –≤–∏–¥–µ–æ. –ü—Ä–∏—à–ª–∏—Ç–µ <b>–≤–∏–¥–µ–æ</b> —Ä–∏–ª—Å–∞.", parse_mode=ParseMode.HTML, reply_markup=_kb_cancel())
        return VIDEO

    reel: Dict[str, Any] = context.user_data.get("reel") or {}
    reel_id = reel.get("id")

    upsert_asset(
        reel_id=reel_id,
        kind="video",
        tg_chat_id=msg.chat_id,
        tg_message_id=msg.message_id,
        tg_file_id=msg.video.file_id,
        tg_file_unique_id=msg.video.file_unique_id,
    )

    await msg.reply_text(
        "‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n–®–∞–≥ 2/3 ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ <b>–ø—Ä–µ–≤—å—é</b> (–æ–±–ª–æ–∂–∫—É) –∫–∞–∫ —Ñ–æ—Ç–æ.",
        parse_mode=ParseMode.HTML,
        reply_markup=_kb_cancel(),
    )
    return PREVIEW


@ADMIN_ONLY
async def reel_preview(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–®–∞–≥ 2: –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–æ—Ç–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º largest file_id + message_id."""
    msg = update.message
    if not msg or not msg.photo:
        await msg.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ <b>–ø—Ä–µ–≤—å—é</b> (–æ–±–ª–æ–∂–∫—É) –∫–∞–∫ —Ñ–æ—Ç–æ.", parse_mode=ParseMode.HTML, reply_markup=_kb_cancel())
        return PREVIEW

    photo = msg.photo[-1]  # —Å–∞–º–æ–µ –∫—Ä—É–ø–Ω–æ–µ
    reel: Dict[str, Any] = context.user_data.get("reel") or {}
    reel_id = reel.get("id")

    upsert_asset(
        reel_id=reel_id,
        kind="preview",
        tg_chat_id=msg.chat_id,
        tg_message_id=msg.message_id,
        tg_file_id=photo.file_id,
        tg_file_unique_id=photo.file_unique_id,
    )

    await msg.reply_text(
        "‚úÖ –ü—Ä–µ–≤—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n–®–∞–≥ 3/3 ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b> —Ä–∏–ª—Å–∞ (—Ç–µ–∫—Å—Ç).",
        parse_mode=ParseMode.HTML,
        reply_markup=_kb_cancel(),
    )
    return CAPTION


@ADMIN_ONLY
async def reel_caption(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–®–∞–≥ 3: –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–µ–∫—Å—Ç-–æ–ø–∏—Å–∞–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å."""
    msg = update.message
    if not msg or not msg.text:
        await msg.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>—Ç–µ–∫—Å—Ç</b> ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∏–ª—Å–∞.", parse_mode=ParseMode.HTML, reply_markup=_kb_cancel())
        return CAPTION

    reel: Dict[str, Any] = context.user_data.get("reel") or {}
    reel_id = reel.get("id")

    upsert_asset(
        reel_id=reel_id,
        kind="caption",
        tg_chat_id=msg.chat_id,
        tg_message_id=msg.message_id,
        text=msg.text.strip(),
    )

    details = get_reel(reel_id)
    title = details["reel"].get("title") or f"Reel #{reel_id}"
    has_video = "video" in details["assets"]
    has_preview = "preview" in details["assets"]
    has_caption = "caption" in details["assets"]

    await msg.reply_text(
        f"üßæ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ</b>\n"
        f"ID: <code>{reel_id}</code>\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
        f"–í–∏–¥–µ–æ: {'‚úÖ' if has_video else '‚ùå'}\n"
        f"–ü—Ä–µ–≤—å—é: {'‚úÖ' if has_preview else '‚ùå'}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {'‚úÖ' if has_caption else '‚ùå'}\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Å—Ç–µ—Ä.",
        parse_mode=ParseMode.HTML,
        reply_markup=_kb_confirm(reel_id),
    )
    return CONFIRM


@ADMIN_ONLY
async def reel_confirm_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã."""
    q = update.callback_query
    data = q.data or ""
    await q.answer()

    if data == "reel:cancel":
        context.user_data.pop("reel", None)
        await q.message.edit_text("‚ùé –ú–∞—Å—Ç–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω.")
        return ConversationHandler.END

    if data.startswith("reel:save:"):
        reel_id = int(data.split(":")[2])
        context.user_data.pop("reel", None)
        await q.message.edit_text(f"‚úÖ –†–∏–ª—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω (ID <code>{reel_id}</code>).", parse_mode=ParseMode.HTML)
        return ConversationHandler.END

    return ConversationHandler.END


@ADMIN_ONLY
async def reel_cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã –Ω–∞ –ª—é–±–æ–º —à–∞–≥–µ: /reel_cancel"""
    context.user_data.pop("reel", None)
    await update.message.reply_text("‚ùé –ú–∞—Å—Ç–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –°–ø–∏—Å–æ–∫/—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@ADMIN_ONLY
async def reels_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–ø–∏—Å–æ–∫ —Ä–∏–ª—Å–æ–≤: /reels [limit]"""
    try:
        limit = int(context.args[0]) if context.args else 10
    except ValueError:
        limit = 10

    rows = list_reels(limit=limit)
    if not rows:
        m = await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç —Ä–∏–ª—Å–æ–≤.")
        # —Å–æ—Ö—Ä–∞–Ω–∏–º —Å–≤–æ–¥–∫—É –Ω–∞ –±—É–¥—É—â–µ–µ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
        context.chat_data["reels_summary"] = {"message_id": m.message_id, "limit": limit}
        return

    # –°–≤–æ–¥–∫–∞ (–∑–∞–ø–æ–º–∏–Ω–∞–µ–º message_id, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –æ–±–Ω–æ–≤–ª—è—Ç—å)
    lines = []
    for r in rows:
        rid = r["id"]
        title = r["title"] or f"Reel #{rid}"
        active = bool(r["is_active"])
        assets = r["assets"]
        lines.append(f"‚Ä¢ <b>{title}</b> (ID {rid}) ‚Äî {'üü¢ –∞–∫—Ç–∏–≤–µ–Ω' if active else 'üî¥ –≤—ã–∫–ª—é—á–µ–Ω'}, –∞—Å—Å–µ—Ç–æ–≤: {assets}")

    summary = await update.message.reply_text(
        "\n".join(lines) + "\n\n–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.",
        parse_mode=ParseMode.HTML,
    )
    context.chat_data["reels_summary"] = {"message_id": summary.message_id, "limit": limit}

    # –ö–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –æ–¥–Ω–æ–π
    for r in rows:
        rid = r["id"]
        title = r["title"] or f"Reel #{rid}"
        active = bool(r["is_active"])
        text = f"ID <code>{rid}</code> ‚Äî <b>{title}</b>\n–°—Ç–∞—Ç—É—Å: {'üü¢ –∞–∫—Ç–∏–≤–µ–Ω' if active else 'üî¥ –≤—ã–∫–ª—é—á–µ–Ω'}"
        await update.message.reply_text(
            text, parse_mode=ParseMode.HTML, reply_markup=_kb_list_item(rid, active)
        )


@ADMIN_ONLY
async def reels_manage_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    data = q.data or ""
    await q.answer()

    try:
        _, action, rid_str = data.split(":")
        reel_id = int(rid_str)
    except Exception:
        return

    chat_id = q.message.chat_id

    if action == "activate":
        set_reel_active(reel_id, True)
        await _render_reel_card(q.message, reel_id)
        await _refresh_reels_summary(context, chat_id)

    elif action == "deactivate":
        set_reel_active(reel_id, False)
        await _render_reel_card(q.message, reel_id)
        await _refresh_reels_summary(context, chat_id)

    elif action == "delete":
        delete_reel(reel_id)
        # —É–¥–∞–ª–∏–º –∫–∞—Ä—Ç–æ—á–∫—É —Ä–∏–ª—Å–∞ –∏–∑ —á–∞—Ç–∞
        try:
            await q.message.delete()
        except BadRequest:
            pass
        await _refresh_reels_summary(context, chat_id)

    elif action == "show":
        await _send_reel_preview(context.bot, chat_id, reel_id)
        # –∫–∞—Ä—Ç–æ—á–∫—É –∏ —Å–≤–æ–¥–∫—É –Ω–µ –º–µ–Ω—è–µ–º



from bot.domain.services.reel_delivery_service import deliver_reels_daily

@ADMIN_ONLY
async def reels_send_now(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞–∑–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É‚Ä¶")
    await deliver_reels_daily(context.application.bot)
    await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ.")


from telegram.constants import ParseMode

async def _send_reel_preview(bot, chat_id: int, reel_id: int) -> bool:
    data = get_reel(reel_id)
    if not data:
        await bot.send_message(chat_id, f"‚ö†Ô∏è –†–∏–ª—Å ID {reel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return False

    assets = data.get("assets", {})
    preview = assets.get("preview")
    video   = assets.get("video")
    caption = assets.get("caption")

    sent_any = False

    if preview and preview.get("tg_file_id"):
        await bot.send_photo(chat_id=chat_id, photo=preview["tg_file_id"], disable_notification=True)
        sent_any = True

    if video and video.get("tg_file_id"):
        await bot.send_video(chat_id=chat_id, video=video["tg_file_id"], disable_notification=True)
        sent_any = True

    if caption and caption.get("text"):
        await bot.send_message(
            chat_id=chat_id,
            text=caption["text"],
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
            disable_notification=True,
        )
        sent_any = True

    if not sent_any:
        await bot.send_message(chat_id, f"‚ö†Ô∏è –£ —Ä–∏–ª—Å–∞ ID {reel_id} –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∞—Å—Å–µ—Ç–æ–≤.")
    return sent_any


async def _render_reel_card(message, reel_id: int) -> None:
    details = get_reel(reel_id)
    if not details or not details.get("reel"):
        return
    r = details["reel"]
    title = r.get("title") or f"Reel #{reel_id}"
    active = bool(r.get("is_active"))
    text = (
        f"ID <code>{reel_id}</code> ‚Äî <b>{title}</b>\n"
        f"–°—Ç–∞—Ç—É—Å: {'üü¢ –∞–∫—Ç–∏–≤–µ–Ω' if active else 'üî¥ –≤—ã–∫–ª—é—á–µ–Ω'}"
    )
    kb = _kb_list_item(reel_id, active)
    try:
        await message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=kb)
    except BadRequest as e:
        pass


async def _refresh_reels_summary(context: ContextTypes.DEFAULT_TYPE, chat_id: int) -> None:
    meta = context.chat_data.get("reels_summary")  # {'message_id': int, 'limit': int}
    if not meta:
        return
    msg_id = meta.get("message_id")
    limit = meta.get("limit", 10)

    rows = list_reels(limit=limit)
    if not rows:
        text = "–ü–æ–∫–∞ –Ω–µ—Ç —Ä–∏–ª—Å–æ–≤."
    else:
        lines = []
        for r in rows:
            rid = r["id"]
            title = r["title"] or f"Reel #{rid}"
            active = bool(r["is_active"])
            assets = r["assets"]
            lines.append(f"‚Ä¢ <b>{title}</b> (ID {rid}) ‚Äî {'üü¢ –∞–∫—Ç–∏–≤–µ–Ω' if active else 'üî¥ –≤—ã–∫–ª—é—á–µ–Ω'}, –∞—Å—Å–µ—Ç–æ–≤: {assets}")
        text = "\n".join(lines) + "\n\n–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏."

    try:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=msg_id,
            text=text,
            parse_mode=ParseMode.HTML,
        )
    except BadRequest:
        m = await context.bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.HTML)
        context.chat_data["reels_summary"] = {"message_id": m.message_id, "limit": limit}
