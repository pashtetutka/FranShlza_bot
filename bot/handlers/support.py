import logging
from telegram import Update
from telegram.ext import ContextTypes

from bot.config import settings
from bot.decorators import admin_only   # —Ç–æ—Ç –∂–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, —á—Ç–æ –∏ –≤ –¥—Ä—É–≥–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö

logger = logging.getLogger(__name__)
ADMIN_ID = settings.ADMIN_ID           # —á—Ç–æ–±—ã –Ω–µ —Ç–∞—â–∏—Ç—å settings –≤–æ –≤—Å–µ –≤—ã–∑–æ–≤—ã


# ---------- —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ----------
async def support_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.user_data.get("awaiting_support"):
        return

    user = update.effective_user
    tg_user = f"@{user.username}" if user.username else user.first_name

    await context.bot.send_message(
        ADMIN_ID,
        f"[Support] from {tg_user} (id={user.id}):\n{update.message.text}",
    )

    await context.bot.send_message(ADMIN_ID, f"/reply {user.id} <–æ—Ç–≤–µ—Ç>")
    await update.message.reply_text(
        "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
        "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç (–Ω–µ –±–æ–ª–µ–µ 2‚ÄØ—Å—É—Ç–æ–∫)."
    )
    context.user_data["awaiting_support"] = False


# ---------- –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ----------
@admin_only(ADMIN_ID)
async def admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reply <tg_id> <—Ç–µ–∫—Å—Ç>")
        return

    try:
        target = int(context.args[0])
    except ValueError:
        await update.message.reply_text("–ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º Telegram‚ÄëID.")
        return

    answer = " ".join(context.args[1:])
    await context.bot.send_message(chat_id=target, text=f"üí¨ –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{answer}")
    await update.message.reply_text(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target}.")
